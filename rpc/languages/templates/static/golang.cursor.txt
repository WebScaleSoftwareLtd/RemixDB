// Cursor is used to define the handler for a database cursor. The cursor logic is automatically
// injected if your schema includes a cursor within it.
type Cursor[T any] struct {
	transformer func([]byte) (T, error)
	conn        *websocket.Conn
}

// Close is used to close the cursor.
func (c Cursor[T]) Close() error {
	if c.conn == nil {
		return nil
	}
	return c.conn.CloseNow()
}

// Handles exceptions within cursor packets. Automatically injected if your structure has a cursor.
func handleExceptionPacket(msg []byte, mLen int) error {
	if 3 > mLen {
		goto malformedErr
	}
	isCustom := msg[0] == 1

	msg = msg[1:]
	exceptionNameLen := int(binary.LittleEndian.Uint16(msg))
	msg = msg[2:]
	if exceptionNameLen > len(msg) {
		goto malformedErr
	}

	code := string(msg[:exceptionNameLen])
	msg = msg[exceptionNameLen:]

	if isCustom {
		if err := parseCustomException(code, bytes.NewReader(msg)); err != nil {
			return err
		}
		return ServerError{
			Code:    "exception_not_supported",
			Message: "The server returned an exception, but this client does not support the exception specified.",
		}
	}

	return ServerError{
		Code:    code,
		Message: string(msg),
	}

malformedErr:
	return ServerError{
		Code:    "malformed_packet",
		Message: "The cursor response packet was malformed.",
	}
}

var ob = []byte{1}

// Next is used to get the next cursor item.
func (c Cursor[T]) Next(ctx context.Context) (val T, err error) {
	if err = c.conn.Write(ctx, websocket.MessageBinary, ob); err != nil {
		return
	}
	var msg []byte
	if _, msg, err = c.conn.Read(ctx); err != nil {
		return
	}

	mLen := len(msg)
	if mLen >= 1 {
		switch status := msg[0] {
		case 2:
			return c.transformer(msg[1:])
		case 3:
			err = io.EOF
			return
		}
	}

	err = handleExceptionPacket(msg, mLen)
}

// Initializes the cursor. Automatically injected when a cursor is used.
func initCursor[T any](
	c *client, ctx context.Context, methodName, schemaHash string, input []byte,
	transformer func([]byte) (T, error),
) (Cursor[T], error) {
	opts := &websocket.DialOptions{HTTPClient: c.http}

	u, err := url.Parse(c.url)
	if err != nil {
		return nil, err
	}
	u.Path = path.Join(u.Path, "rpc")

	ws, _, err := websocket.Dial(ctx, u.String(), opts)
	if err != nil {
		return Cursor[T]{}, err
	}

	methodLen := 2 + len(methodName)
	schemaLen := 2 + len(schemaHash)
	authLineLen := len(c.authLine)
	b := make([]byte, methodLen + schemaLen + authLineLen + len(input))

	binary.LittleEndian.PutUint16(b, uint16(len(methodName)))
	copy(b[2:], methodName)

	view := b[methodLen:]
	binary.LittleEndian.PutUint16(view, uint16(len(schemaHash)))
	copy(view[2:], schemaHash)

	view = view[schemaLen:]
	copy(view, c.authLine)
	copy(view[authLineLen:], input)
	view = nil

	if err = ws.Write(ctx, websocket.MessageBinary, b); err != nil {
		return Cursor[T]{}, err
	}

	if _, b, err = ws.Read(ctx); err != nil {
		return Cursor[T]{}, err
	}

	bLen := len(b)
	if bLen == 1 && b[0] == 2 {
		return Cursor[T]{
			transformer: transformer,
			conn:        ws,
		}, nil
	}

	return Cursor[T]{}, handleExceptionPacket(b, bLen)
}
