([]interface {}) (len=1 cap=1) {
 (ast.ContractToken) {
  Name: (string) (len=4) "Math",
  Argument: (*ast.ContractArgumentToken)({
   Name: (string) (len=1) "x",
   NameIndex: (int) 15,
   Type: (string) (len=3) "int",
   TypeIndex: (int) 16
  }),
  ReturnType: (string) (len=4) "void",
  Position: (int) 0,
  Throws: ([]ast.ContractThrowsToken) {
  },
  Decorators: ([]ast.DecoratorToken) {
  },
  Statements: ([]interface {}) (len=4 cap=4) {
   (ast.IfToken) {
    Condition: (ast.NotToken) {
     Position: (int) 39,
     Token: (ast.ReferenceToken) {
      Name: (string) (len=1) "Z",
      Position: (int) 40,
      Decorators: ([]ast.DecoratorToken) <nil>
     }
    },
    Position: (int) 36,
    Statements: ([]interface {}) {
    },
    Else: (*ast.ElseToken)(<nil>)
   },
   (ast.IfToken) {
    Condition: (ast.NotEqualToken) {
     Left: (ast.NotToken) {
      Position: (int) 53,
      Token: (ast.MethodCallToken) {
       Name: (string) (len=1) "y",
       Position: (int) 54,
       Arguments: ([]interface {}) {
       },
       ChainedCall: (interface {}) <nil>
      }
     },
     Right: (ast.ReferenceToken) {
      Name: (string) (len=1) "x",
      Position: (int) 61,
      Decorators: ([]ast.DecoratorToken) <nil>
     },
     Position: (int) 58
    },
    Position: (int) 50,
    Statements: ([]interface {}) {
    },
    Else: (*ast.ElseToken)(<nil>)
   },
   (ast.IfToken) {
    Condition: (ast.NotToken) {
     Position: (int) 74,
     Token: (ast.AndToken) {
      Left: (ast.MethodCallToken) {
       Name: (string) (len=1) "y",
       Position: (int) 76,
       Arguments: ([]interface {}) {
       },
       ChainedCall: (interface {}) <nil>
      },
      Right: (ast.ReferenceToken) {
       Name: (string) (len=1) "x",
       Position: (int) 83,
       Decorators: ([]ast.DecoratorToken) <nil>
      },
      Position: (int) 80
     }
    },
    Position: (int) 71,
    Statements: ([]interface {}) {
    },
    Else: (*ast.ElseToken)(<nil>)
   },
   (ast.IfToken) {
    Condition: (ast.NotToken) {
     Position: (int) 97,
     Token: (ast.BooleanLiteralToken) {
      Value: (bool) true,
      Position: (int) 98
     }
    },
    Position: (int) 94,
    Statements: ([]interface {}) {
    },
    Else: (*ast.ElseToken)(<nil>)
   }
  }
 }
}
