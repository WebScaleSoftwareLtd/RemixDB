([]interface {}) (len=1 cap=1) {
 (ast.ContractToken) {
  Name: (string) (len=6) "Throws",
  Argument: (*ast.ContractArgumentToken)({
   Name: (string) (len=1) "x",
   NameIndex: (int) 17,
   Type: (string) (len=4) "bool",
   TypeIndex: (int) 18
  }),
  ReturnType: (string) (len=4) "void",
  Position: (int) 0,
  Throws: ([]ast.ContractThrowsToken) {
  },
  Decorators: ([]ast.DecoratorToken) {
  },
  Statements: ([]interface {}) (len=3 cap=4) {
   (ast.IfToken) {
    Condition: (ast.BooleanLiteralToken) {
     Value: (bool) false,
     Position: (int) 42
    },
    Position: (int) 39,
    Statements: ([]interface {}) (len=1 cap=1) {
     (ast.ThrowLiteralToken) {
      Token: (ast.MethodCallToken) {
       Name: (string) (len=14) "MyAwesomeError",
       Position: (int) 64,
       Arguments: ([]interface {}) {
       },
       ChainedCall: (interface {}) <nil>
      },
      Position: (int) 58
     }
    },
    Else: (*ast.ElseToken)(<nil>)
   },
   (ast.IfToken) {
    Condition: (ast.BooleanLiteralToken) {
     Value: (bool) false,
     Position: (int) 95
    },
    Position: (int) 92,
    Statements: ([]interface {}) (len=1 cap=1) {
     (ast.ThrowLiteralToken) {
      Token: (ast.MethodCallToken) {
       Name: (string) (len=14) "MyAwesomeError",
       Position: (int) 117,
       Arguments: ([]interface {}) (len=1 cap=1) {
        (ast.ObjectLiteralToken) {
         Values: (map[string]interface {}) (len=1) {
          (string) (len=5) "hello": (ast.StringLiteralToken) {
           Value: (string) (len=5) "world",
           Position: (int) 154
          }
         },
         Comments: ([]ast.CommentToken) {
         },
         Position: (int) 132
        }
       },
       ChainedCall: (interface {}) <nil>
      },
      Position: (int) 111
     }
    },
    Else: (*ast.ElseToken)(<nil>)
   },
   (ast.IfToken) {
    Condition: (ast.BooleanLiteralToken) {
     Value: (bool) false,
     Position: (int) 187
    },
    Position: (int) 184,
    Statements: ([]interface {}) (len=1 cap=1) {
     (ast.ThrowLiteralToken) {
      Token: (ast.InlineIfToken) {
       Condition: (ast.ReferenceToken) {
        Name: (string) (len=1) "x",
        Position: (int) 229,
        Decorators: ([]ast.DecoratorToken) <nil>
       },
       Position: (int) 226,
       Token: (ast.MethodCallToken) {
        Name: (string) (len=14) "MyAwesomeError",
        Position: (int) 209,
        Arguments: ([]interface {}) {
        },
        ChainedCall: (interface {}) <nil>
       }
      },
      Position: (int) 203
     }
    },
    Else: (*ast.ElseToken)(<nil>)
   }
  }
 }
}
