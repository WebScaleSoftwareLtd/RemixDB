// This file is automatically generated by RemixDB. Do not edit.

package rpc

import (
	"bytes"
	"context"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"

	"nhooyr.io/websocket"
)

// Make sure this is always imported since it is used in a lot of places,
// but we do not want to break code if this is a edgecase file.
var _ = binary.LittleEndian

type readJoiner struct {
	index   int
	readers []io.Reader
}

func (r *readJoiner) Read(p []byte) (n int, err error) {
	if r.index >= len(r.readers) {
		return 0, io.EOF
	}

	for {
		// Get the current reader.
		reader := r.readers[r.index]

		// Read from the reader.
		x, err := reader.Read(p[n:])
		n += x
		if err == io.EOF {
			// If the reader is done, move to the next one.
			r.index++
			if r.index >= len(r.readers) {
				return n, io.EOF
			}
			continue
		}

		// If all the bytes were read or there was an error, return.
		if n == len(p) || err != nil {
			return n, err
		}

		// If the reader didn't return an error, but didn't read all the bytes,
		// move to the next reader.
		r.index++
		if r.index >= len(r.readers) {
			// If there are no more readers, return the number of bytes read.
			return n, nil
		}
	}
}

type byteSliceAddition struct {
	next *byteSliceAddition
	b    *byte
	sl   []byte
	u16  *uint16
	u32  *uint32
	u64  *uint64
	s    string
}

type byteSliceMaker struct {
	len   int
	start *byteSliceAddition
	end   *byteSliceAddition
}

func (b *byteSliceMaker) newAddition() *byteSliceAddition {
	a := &byteSliceAddition{}
	if b.start == nil {
		b.start = a
		b.end = a
	} else {
		b.end.next = a
		b.end = a
	}
	return a
}

func (b *byteSliceMaker) AddByte(x byte) {
	a := b.newAddition()
	a.b = &x
	b.len++
}

func (b *byteSliceMaker) AddByteSlice(x []byte) {
	a := b.newAddition()
	a.sl = x
	b.len += len(x)
}

func (b *byteSliceMaker) AddUint16(x uint16) {
	a := b.newAddition()
	a.u16 = &x
	b.len += 2
}

func (b *byteSliceMaker) AddUint32(x uint32) {
	a := b.newAddition()
	a.u32 = &x
	b.len += 4
}

func (b *byteSliceMaker) AddUint64(x uint64) {
	a := b.newAddition()
	a.u64 = &x
	b.len += 8
}

func (b *byteSliceMaker) AddString(x string) {
	a := b.newAddition()
	a.s = x
	b.len += len(x)
}

func (b *byteSliceMaker) Make() []byte {
	sl := make([]byte, b.len)
	view := sl

	for x := b.start; x != nil; x = x.next {
		switch {
		case x.b != nil:
			view[0] = *x.b
			view = view[1:]
		case x.sl != nil:
			copy(view, x.sl)
			view = view[len(x.sl):]
		case x.u16 != nil:
			binary.LittleEndian.PutUint16(view, *x.u16)
			view = view[2:]
		case x.u32 != nil:
			binary.LittleEndian.PutUint32(view, *x.u32)
			view = view[4:]
		case x.u64 != nil:
			binary.LittleEndian.PutUint64(view, *x.u64)
			view = view[8:]
		default:
			copy(view, x.s)
			view = view[len(x.s):]
		}
	}

	return sl
}

// ErrorWithAllFields used to test a error with all fields
type ErrorWithAllFields struct {
	// Field used to test a field
	Field string `json:"field"`

	// Field2 used to test a field
	Field2 string `json:"field2"`
}

// Error is used to return the error message.
func (e ErrorWithAllFields) Error() string {
	return "ErrorWithAllFields: " + fmt.Sprint("{", "Field =", e.Field, "Field2 =", e.Field2, "}")
}

// ErrorWithMessageField used to test a error with a message field
type ErrorWithMessageField struct {
	// Field used to test a field
	Field *string `json:"field"`

	// Message used to test a message field
	Message string `json:"message"`
}

// Error is used to return the error message.
func (e ErrorWithMessageField) Error() string {
	return "ErrorWithMessageField: " + fmt.Sprint(e.Message)
}

// OneField used to test a single field
type OneField struct {
	// Field used to test a field
	Field string `json:"field"`
}

// Client is used to define the interface for the generated client.
type Client interface {
	// SetHTTPClient is used to set the HTTP client used by the RPC client. Please
	// note that the HTTP client must be safe for concurrent use, but this method
	// itself is not safe for concurrent use (so call it before you start using
	// the client).
	SetHTTPClient(client *http.Client)

	// AllVoid used to test all void
	AllVoid(ctx context.Context) error

	// Cursor used to test a cursor
	Cursor(ctx context.Context) (Cursor[string], error)

	NoComment(ctx context.Context, NoCommentInput string) (string, error)

	// OptionalCursor used to test a optional cursor
	OptionalCursor(ctx context.Context) (Cursor[*string], error)

	// StructCursorOutput used to test a struct cursor output
	StructCursorOutput(ctx context.Context) (Cursor[*OneField], error)

	// StructOptionalOutput used to test a optional struct output
	StructOptionalOutput(ctx context.Context) (*OneField, error)

	// StructOutput used to test a struct output
	StructOutput(ctx context.Context) (OneField, error)

	// VoidInput used to test a void input
	VoidInput(ctx context.Context) (string, error)

	// VoidOutput used to test a void output
	VoidOutput(ctx context.Context, VoidOutputInput string) error
}

// AuthenticationOptions is used to define the authentication options for the generated client.
type AuthenticationOptions struct {
	LongKey string `json:"long_key"`
	Key2    string `json:"key2"`
}

type client struct {
	authLine []byte
	url      string
	http     *http.Client
}

// ErrInvalidURLScheme is used when the URL scheme is not supported.
var ErrInvalidURLScheme = fmt.Errorf("invalid URL scheme")

// NewClient is used to create a new client.
func NewClient(urlString string, auth AuthenticationOptions) (Client, error) {
	u, err := url.Parse(urlString)
	if err != nil {
		return nil, err
	}

	if u.Scheme != "http" && u.Scheme != "https" {
		return nil, ErrInvalidURLScheme
	}

	b, _ := json.Marshal(auth)
	return &client{
		authLine: append(b, '\n'),
		url:      urlString,
	}, nil
}

func (c *client) SetHTTPClient(client *http.Client) {
	c.http = client
}

func parseCustomException(statusCode int, key string, body io.ReadCloser) error {
	switch key {
	case "ErrorWithAllFields":
		var e ErrorWithAllFields
		defer body.Close()
		if err := json.NewDecoder(body).Decode(&e); err != nil {
			return ServerError{
				StatusCode: statusCode,
				Code:       "invalid_response",
				Message:    "The response could not be decoded.",
			}
		}
		return e
	case "ErrorWithMessageField":
		var e ErrorWithMessageField
		defer body.Close()
		if err := json.NewDecoder(body).Decode(&e); err != nil {
			return ServerError{
				StatusCode: statusCode,
				Code:       "invalid_response",
				Message:    "The response could not be decoded.",
			}
		}
		return e
	}
	return nil
}

// ServerError is used to represent a server error.
type ServerError struct {
	// StatusCode is the HTTP status code. This is not present for cursors.
	StatusCode int `json:"status_code"`

	// Code is the error code.
	Code string `json:"code"`

	// Message is the error message.
	Message string `json:"message"`
}

// Error is used to return the error message.
func (e ServerError) Error() string {
	return e.Code + ": " + e.Message
}

// Cursor is used to define the handler for a database cursor. The cursor logic is automatically
// injected if your schema includes a cursor within it.
type Cursor[T any] struct {
	transformer func([]byte) (T, error)
	conn        *websocket.Conn
}

// Close is used to close the cursor.
func (c Cursor[T]) Close() error {
	if c.conn == nil {
		return nil
	}
	return c.conn.CloseNow()
}

// Handles exceptions within cursor packets. Automatically injected if your structure has a cursor.
func handleExceptionPacket(msg []byte, mLen int) error {
	malformedErr := func() error {
		return ServerError{
			Code:    "malformed_packet",
			Message: "The cursor response packet was malformed.",
		}
	}

	if 3 > mLen {
		return malformedErr()
	}
	isCustom := msg[0] == 1

	msg = msg[1:]
	exceptionNameLen := int(binary.LittleEndian.Uint16(msg))
	msg = msg[2:]
	if exceptionNameLen > len(msg) {
		return malformedErr()
	}

	code := string(msg[:exceptionNameLen])
	msg = msg[exceptionNameLen:]

	if isCustom {
		if err := parseCustomException(0, code, io.NopCloser(bytes.NewReader(msg))); err != nil {
			return err
		}
		return ServerError{
			Code:    "exception_not_supported",
			Message: "The server returned an exception, but this client does not support the exception specified.",
		}
	}

	return ServerError{
		Code:    code,
		Message: string(msg),
	}
}

// Next is used to get the next cursor item.
func (c Cursor[T]) Next(ctx context.Context) (val T, err error) {
	if err = c.conn.Write(ctx, websocket.MessageBinary, []byte{1}); err != nil {
		return
	}
	var msg []byte
	if _, msg, err = c.conn.Read(ctx); err != nil {
		return
	}

	mLen := len(msg)
	if mLen >= 1 {
		status := msg[0]
		switch status {
		case 2:
			return c.transformer(msg[1:])
		case 3:
			err = io.EOF
			return
		}
	}

	err = handleExceptionPacket(msg, mLen)
	return
}

// Initializes the cursor. Automatically injected when a cursor is used.
func initCursor[T any](
	c *client, ctx context.Context, methodName, schemaHash string, input []byte,
	transformer func([]byte) (T, error),
) (Cursor[T], error) {
	opts := &websocket.DialOptions{HTTPClient: c.http}

	u, err := url.Parse(c.url)
	if err != nil {
		return Cursor[T]{}, err
	}
	u.Path = path.Join(u.Path, "rpc")

	ws, _, err := websocket.Dial(ctx, u.String(), opts)
	if err != nil {
		return Cursor[T]{}, err
	}

	methodLen := 2 + len(methodName)
	schemaLen := 2 + len(schemaHash)
	authLineLen := len(c.authLine)
	b := make([]byte, methodLen + schemaLen + authLineLen + len(input))

	binary.LittleEndian.PutUint16(b, uint16(len(methodName)))
	copy(b[2:], methodName)

	view := b[methodLen:]
	binary.LittleEndian.PutUint16(view, uint16(len(schemaHash)))
	copy(view[2:], schemaHash)

	view = view[schemaLen:]
	copy(view, c.authLine)
	copy(view[authLineLen:], input)
	view = nil

	if err = ws.Write(ctx, websocket.MessageBinary, b); err != nil {
		return Cursor[T]{}, err
	}

	if _, b, err = ws.Read(ctx); err != nil {
		return Cursor[T]{}, err
	}

	bLen := len(b)
	if bLen == 1 && b[0] == 2 {
		return Cursor[T]{
			transformer: transformer,
			conn:        ws,
		}, nil
	}

	return Cursor[T]{}, handleExceptionPacket(b, bLen)
}

func remixdbInternalUnexpectedPacket(typeWanted string, packetByte byte) error {
	var packetByteS string
	switch packetByte {
	case 0x00:
		packetByteS = "null"
	case 0x01:
		packetByteS = "false (bool)"
	case 0x02:
		packetByteS = "true (bool)"
	case 0x03, 0x05:
		packetByteS = "bytes"
	case 0x04, 0x06:
		packetByteS = "string"
	case 0x07:
		packetByteS = "array"
	case 0x08:
		packetByteS = "map"
	case 0x09:
		packetByteS = "struct"
	case 0x0a, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
		0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f:
		packetByteS = "integer"
	case 0x0b, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
		0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
		0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
		0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f:
		packetByteS = "float"
	case 0x0c:
		packetByteS = "timestamp"
	case 0x0d, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
		0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
		0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
		0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f:
		packetByteS = "big integer"
	case 0x0e, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
		0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f:
		packetByteS = "unsigned integer"
	default:
		packetByteS = "unknown"
	}

	errMsg := "expected packet of type " + typeWanted + ", got " + packetByteS
	return ServerError{
		Code:    "unexpected_packet",
		Message: errMsg,
	}
}

type serverError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (c *client) do(ctx context.Context, methodName, schemaHash string, input []byte) ([]byte, error) {
	u, err := url.Parse(c.url)
	if err != nil {
		return nil, err
	}
	u.Path = path.Join(u.Path, "rpc", methodName)

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, u.String(), &readJoiner{
		readers: []io.Reader{
			bytes.NewReader(c.authLine),
			bytes.NewReader(input),
		},
	})
	if err != nil {
		return nil, err
	}
	req.Header.Set("X-RemixDB-Schema-Hash", schemaHash)
	req.Header.Set("Content-Type", "application/x-remixdb-rpc-mixed")

	httpClient := c.http
	if httpClient == nil {
		httpClient = http.DefaultClient
	}
	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	if resp.Header.Get("X-Is-RemixDB") != "true" {
		_ = resp.Body.Close()
		return nil, ServerError{
			StatusCode: resp.StatusCode,
			Code:       "response_is_not_remixdb",
			Message:    "The response does not appear to be from RemixDB. Does your reverse proxy let through the X-Is-RemixDB header?",
		}
	}

	switch resp.StatusCode {
	case http.StatusOK, http.StatusNoContent:
		return io.ReadAll(resp.Body)
	}

	e := resp.Header.Get("X-RemixDB-Exception")
	switch e {
	case "":
		// Do nothing.
	default:
		if err := parseCustomException(resp.StatusCode, e, resp.Body); err != nil {
			return nil, err
		}
		_ = resp.Body.Close()
		return nil, ServerError{
			StatusCode: resp.StatusCode,
			Code:       "exception_not_supported",
			Message:    "The server returned an exception, but this client does not support the exception specified.",
		}
	}

	var sErr serverError
	defer resp.Body.Close()
	if err := json.NewDecoder(resp.Body).Decode(&sErr); err != nil {
		return nil, ServerError{
			StatusCode: resp.StatusCode,
			Code:       "invalid_response",
			Message:    "The response could not be decoded.",
		}
	}

	return nil, ServerError{
		StatusCode: resp.StatusCode,
		Code:       sErr.Code,
		Message:    sErr.Message,
	}
}

func (c *client) AllVoid(ctx context.Context) error {
	remixdbInternalSliceMaker := byteSliceMaker{}

	_, err := c.do(ctx, "AllVoid", "method_hash_here", remixdbInternalSliceMaker.Make())
	if err != nil {
		return err
	}

	return nil
}

func (c *client) Cursor(ctx context.Context) (Cursor[string], error) {
	remixdbInternalSliceMaker := byteSliceMaker{}
	remixdbInternalError := func(e error) (_ string, err error) {
		err = e
		return
	}

	return initCursor(c, ctx, "Cursor", "method_hash_here", remixdbInternalSliceMaker.Make(), func(b []byte) (string, error) {
		if len(b) == 0 {
			return remixdbInternalError(ServerError{
				Code:    "unexpected_void",
				Message: "Unexpected void when a result was expected",
			})
		}
		remixdbInternalPacketType := b[0]
		b = b[1:]

		switch remixdbInternalPacketType {
		case 0x04:
		    return "", nil
		case 0x06:
		    return string(b), nil
		default:
		    return remixdbInternalError(remixdbInternalUnexpectedPacket("string", remixdbInternalPacketType))
		}
	})
}

func (c *client) NoComment(ctx context.Context, NoCommentInput string) (string, error) {
	remixdbInternalSliceMaker := byteSliceMaker{}
	remixdbInternalError := func(e error) (_ string, err error) {
		err = e
		return
	}

	// TODO: Handle inputs

	b, err := c.do(ctx, "NoComment", "method_hash_here", remixdbInternalSliceMaker.Make())
	if err != nil {
		return remixdbInternalError(err)
	}

	if len(b) == 0 {
		return remixdbInternalError(ServerError{
			Code:    "unexpected_void",
			Message: "Unexpected void when a result was expected",
		})
	}
	remixdbInternalPacketType := b[0]
	b = b[1:]

	switch remixdbInternalPacketType {
	case 0x04:
	    return "", nil
	case 0x06:
	    return string(b), nil
	default:
	    return remixdbInternalError(remixdbInternalUnexpectedPacket("string", remixdbInternalPacketType))
	}
}

func (c *client) OptionalCursor(ctx context.Context) (Cursor[*string], error) {
	remixdbInternalSliceMaker := byteSliceMaker{}
	remixdbInternalError := func(e error) (_ *string, err error) {
		err = e
		return
	}

	return initCursor(c, ctx, "OptionalCursor", "method_hash_here", remixdbInternalSliceMaker.Make(), func(b []byte) (*string, error) {
		if len(b) == 0 {
			return remixdbInternalError(ServerError{
				Code:    "unexpected_void",
				Message: "Unexpected void when a result was expected",
			})
		}
		remixdbInternalPacketType := b[0]
		b = b[1:]

		if remixdbInternalPacketType == 0x00 {
			return nil, nil
		}

		remixDbInternalValueNonPtr, err := (func() (string, error) {
			remixdbInternalError := func(e error) (_ string, err error) {
				err = e
				return
			}

			switch remixdbInternalPacketType {
			case 0x04:
			    return "", nil
			case 0x06:
			    return string(b), nil
			default:
			    return remixdbInternalError(remixdbInternalUnexpectedPacket("string", remixdbInternalPacketType))
			}
		})()

		if err != nil {
			return nil, err
		}
		return &remixDbInternalValueNonPtr, nil
	})
}

func (c *client) StructCursorOutput(ctx context.Context) (Cursor[*OneField], error) {
	remixdbInternalSliceMaker := byteSliceMaker{}
	remixdbInternalError := func(e error) (_ *OneField, err error) {
		err = e
		return
	}

	return initCursor(c, ctx, "StructCursorOutput", "method_hash_here", remixdbInternalSliceMaker.Make(), func(b []byte) (*OneField, error) {
		if len(b) == 0 {
			return remixdbInternalError(ServerError{
				Code:    "unexpected_void",
				Message: "Unexpected void when a result was expected",
			})
		}
		remixdbInternalPacketType := b[0]
		b = b[1:]

		if remixdbInternalPacketType == 0x00 {
			return nil, nil
		}

		remixDbInternalValueNonPtr, err := (func() (OneField, error) {
			remixdbInternalError := func(e error) (_ OneField, err error) {
				err = e
				return
			}

			if remixdbInternalPacketType != 0x09 {
				return remixdbInternalError(remixdbInternalUnexpectedPacket("struct", remixdbInternalPacketType))
			}

			if len(b) < 3 {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}

			remixdbInternalStructNameLen := int(b[0])
			b = b[1:]

			if len(b) < remixdbInternalStructNameLen {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}

			remixdbInternalStructName := string(b[:remixdbInternalStructNameLen])
			b = b[remixdbInternalStructNameLen:]

			if remixdbInternalStructName != "OneField" {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Unexpected struct name.",
				})
			}

			if len(b) < 2 {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}

			remixdbInternalStructFieldCount := int(binary.LittleEndian.Uint16(b))
			remixdbInternalStruct := OneField{}

			for remixdbInternalStructFieldIndex := 0; remixdbInternalStructFieldIndex < remixdbInternalStructFieldCount; remixdbInternalStructFieldIndex++ {
				if len(b) < 7 {
					return remixdbInternalError(ServerError{
						Code:    "malformed_packet",
						Message: "Not enough room in the packet to hold all struct data.",
					})
				}

				remixdbInternalStructFieldNameLen := binary.LittleEndian.Uint16(b)
				b = b[2:]

				if len(b) < int(remixdbInternalStructFieldNameLen) {
					return remixdbInternalError(ServerError{
						Code:    "malformed_packet",
						Message: "Not enough room in the packet to hold all struct data.",
					})
				}

				remixdbInternalStructFieldName := string(b[:remixdbInternalStructFieldNameLen])
				b = b[remixdbInternalStructFieldNameLen:]

				if len(b) < 4 {
					return remixdbInternalError(ServerError{
						Code:    "malformed_packet",
						Message: "Not enough room in the packet to hold all struct data.",
					})
				}

				remixdbInternalStructFieldDataLen := binary.LittleEndian.Uint32(b)
				b = b[4:]

				if len(b) < int(remixdbInternalStructFieldDataLen) {
					return remixdbInternalError(ServerError{
						Code:    "malformed_packet",
						Message: "Not enough room in the packet to hold all struct data.",
					})
				}

				remixdbInternalStructFieldData := b[:remixdbInternalStructFieldDataLen]
				b = b[remixdbInternalStructFieldDataLen:]

				if len(remixdbInternalStructFieldData) == 0 {
					return remixdbInternalError(ServerError{
						Code:    "malformed_packet",
						Message: "Not enough room in the packet to hold all struct data.",
					})
				}
				remixdbInternalPacketType = remixdbInternalStructFieldData[0]

				switch remixdbInternalStructFieldName {
				case "field":
					remixdbFieldValue, err := (func(b []byte) (string, error) {
						remixdbInternalError := func(e error) (_ string, err error) {
							err = e
							return
						}

						switch remixdbInternalPacketType {
						case 0x04:
						    return "", nil
						case 0x06:
						    return string(b), nil
						default:
						    return remixdbInternalError(remixdbInternalUnexpectedPacket("string", remixdbInternalPacketType))
						}
					})(remixdbInternalStructFieldData[1:])
					if err != nil {
						return remixdbInternalError(err)
					}
					remixdbInternalStruct.Field = remixdbFieldValue
				}
			}

			return remixdbInternalStruct, nil
		})()

		if err != nil {
			return nil, err
		}
		return &remixDbInternalValueNonPtr, nil
	})
}

func (c *client) StructOptionalOutput(ctx context.Context) (*OneField, error) {
	remixdbInternalSliceMaker := byteSliceMaker{}
	remixdbInternalError := func(e error) (_ *OneField, err error) {
		err = e
		return
	}

	b, err := c.do(ctx, "StructOptionalOutput", "method_hash_here", remixdbInternalSliceMaker.Make())
	if err != nil {
		return remixdbInternalError(err)
	}

	if len(b) == 0 {
		return remixdbInternalError(ServerError{
			Code:    "unexpected_void",
			Message: "Unexpected void when a result was expected",
		})
	}
	remixdbInternalPacketType := b[0]
	b = b[1:]

	if remixdbInternalPacketType == 0x00 {
		return nil, nil
	}

	remixDbInternalValueNonPtr, err := (func() (OneField, error) {
		remixdbInternalError := func(e error) (_ OneField, err error) {
			err = e
			return
		}

		if remixdbInternalPacketType != 0x09 {
			return remixdbInternalError(remixdbInternalUnexpectedPacket("struct", remixdbInternalPacketType))
		}

		if len(b) < 3 {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}

		remixdbInternalStructNameLen := int(b[0])
		b = b[1:]

		if len(b) < remixdbInternalStructNameLen {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}

		remixdbInternalStructName := string(b[:remixdbInternalStructNameLen])
		b = b[remixdbInternalStructNameLen:]

		if remixdbInternalStructName != "OneField" {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Unexpected struct name.",
			})
		}

		if len(b) < 2 {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}

		remixdbInternalStructFieldCount := int(binary.LittleEndian.Uint16(b))
		remixdbInternalStruct := OneField{}

		for remixdbInternalStructFieldIndex := 0; remixdbInternalStructFieldIndex < remixdbInternalStructFieldCount; remixdbInternalStructFieldIndex++ {
			if len(b) < 7 {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}

			remixdbInternalStructFieldNameLen := binary.LittleEndian.Uint16(b)
			b = b[2:]

			if len(b) < int(remixdbInternalStructFieldNameLen) {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}

			remixdbInternalStructFieldName := string(b[:remixdbInternalStructFieldNameLen])
			b = b[remixdbInternalStructFieldNameLen:]

			if len(b) < 4 {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}

			remixdbInternalStructFieldDataLen := binary.LittleEndian.Uint32(b)
			b = b[4:]

			if len(b) < int(remixdbInternalStructFieldDataLen) {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}

			remixdbInternalStructFieldData := b[:remixdbInternalStructFieldDataLen]
			b = b[remixdbInternalStructFieldDataLen:]

			if len(remixdbInternalStructFieldData) == 0 {
				return remixdbInternalError(ServerError{
					Code:    "malformed_packet",
					Message: "Not enough room in the packet to hold all struct data.",
				})
			}
			remixdbInternalPacketType = remixdbInternalStructFieldData[0]

			switch remixdbInternalStructFieldName {
			case "field":
				remixdbFieldValue, err := (func(b []byte) (string, error) {
					remixdbInternalError := func(e error) (_ string, err error) {
						err = e
						return
					}

					switch remixdbInternalPacketType {
					case 0x04:
					    return "", nil
					case 0x06:
					    return string(b), nil
					default:
					    return remixdbInternalError(remixdbInternalUnexpectedPacket("string", remixdbInternalPacketType))
					}
				})(remixdbInternalStructFieldData[1:])
				if err != nil {
					return remixdbInternalError(err)
				}
				remixdbInternalStruct.Field = remixdbFieldValue
			}
		}

		return remixdbInternalStruct, nil
	})()

	if err != nil {
		return nil, err
	}
	return &remixDbInternalValueNonPtr, nil
}

func (c *client) StructOutput(ctx context.Context) (OneField, error) {
	remixdbInternalSliceMaker := byteSliceMaker{}
	remixdbInternalError := func(e error) (_ OneField, err error) {
		err = e
		return
	}

	b, err := c.do(ctx, "StructOutput", "method_hash_here", remixdbInternalSliceMaker.Make())
	if err != nil {
		return remixdbInternalError(err)
	}

	if len(b) == 0 {
		return remixdbInternalError(ServerError{
			Code:    "unexpected_void",
			Message: "Unexpected void when a result was expected",
		})
	}
	remixdbInternalPacketType := b[0]
	b = b[1:]

	if remixdbInternalPacketType != 0x09 {
		return remixdbInternalError(remixdbInternalUnexpectedPacket("struct", remixdbInternalPacketType))
	}

	if len(b) < 3 {
		return remixdbInternalError(ServerError{
			Code:    "malformed_packet",
			Message: "Not enough room in the packet to hold all struct data.",
		})
	}

	remixdbInternalStructNameLen := int(b[0])
	b = b[1:]

	if len(b) < remixdbInternalStructNameLen {
		return remixdbInternalError(ServerError{
			Code:    "malformed_packet",
			Message: "Not enough room in the packet to hold all struct data.",
		})
	}

	remixdbInternalStructName := string(b[:remixdbInternalStructNameLen])
	b = b[remixdbInternalStructNameLen:]

	if remixdbInternalStructName != "OneField" {
		return remixdbInternalError(ServerError{
			Code:    "malformed_packet",
			Message: "Unexpected struct name.",
		})
	}

	if len(b) < 2 {
		return remixdbInternalError(ServerError{
			Code:    "malformed_packet",
			Message: "Not enough room in the packet to hold all struct data.",
		})
	}

	remixdbInternalStructFieldCount := int(binary.LittleEndian.Uint16(b))
	remixdbInternalStruct := OneField{}

	for remixdbInternalStructFieldIndex := 0; remixdbInternalStructFieldIndex < remixdbInternalStructFieldCount; remixdbInternalStructFieldIndex++ {
		if len(b) < 7 {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}

		remixdbInternalStructFieldNameLen := binary.LittleEndian.Uint16(b)
		b = b[2:]

		if len(b) < int(remixdbInternalStructFieldNameLen) {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}

		remixdbInternalStructFieldName := string(b[:remixdbInternalStructFieldNameLen])
		b = b[remixdbInternalStructFieldNameLen:]

		if len(b) < 4 {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}

		remixdbInternalStructFieldDataLen := binary.LittleEndian.Uint32(b)
		b = b[4:]

		if len(b) < int(remixdbInternalStructFieldDataLen) {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}

		remixdbInternalStructFieldData := b[:remixdbInternalStructFieldDataLen]
		b = b[remixdbInternalStructFieldDataLen:]

		if len(remixdbInternalStructFieldData) == 0 {
			return remixdbInternalError(ServerError{
				Code:    "malformed_packet",
				Message: "Not enough room in the packet to hold all struct data.",
			})
		}
		remixdbInternalPacketType = remixdbInternalStructFieldData[0]

		switch remixdbInternalStructFieldName {
		case "field":
			remixdbFieldValue, err := (func(b []byte) (string, error) {
				remixdbInternalError := func(e error) (_ string, err error) {
					err = e
					return
				}

				switch remixdbInternalPacketType {
				case 0x04:
				    return "", nil
				case 0x06:
				    return string(b), nil
				default:
				    return remixdbInternalError(remixdbInternalUnexpectedPacket("string", remixdbInternalPacketType))
				}
			})(remixdbInternalStructFieldData[1:])
			if err != nil {
				return remixdbInternalError(err)
			}
			remixdbInternalStruct.Field = remixdbFieldValue
		}
	}

	return remixdbInternalStruct, nil
}

func (c *client) VoidInput(ctx context.Context) (string, error) {
	remixdbInternalSliceMaker := byteSliceMaker{}
	remixdbInternalError := func(e error) (_ string, err error) {
		err = e
		return
	}

	b, err := c.do(ctx, "VoidInput", "method_hash_here", remixdbInternalSliceMaker.Make())
	if err != nil {
		return remixdbInternalError(err)
	}

	if len(b) == 0 {
		return remixdbInternalError(ServerError{
			Code:    "unexpected_void",
			Message: "Unexpected void when a result was expected",
		})
	}
	remixdbInternalPacketType := b[0]
	b = b[1:]

	switch remixdbInternalPacketType {
	case 0x04:
	    return "", nil
	case 0x06:
	    return string(b), nil
	default:
	    return remixdbInternalError(remixdbInternalUnexpectedPacket("string", remixdbInternalPacketType))
	}
}

func (c *client) VoidOutput(ctx context.Context, VoidOutputInput string) error {
	remixdbInternalSliceMaker := byteSliceMaker{}

	// TODO: Handle inputs

	_, err := c.do(ctx, "VoidOutput", "method_hash_here", remixdbInternalSliceMaker.Make())
	if err != nil {
		return err
	}

	return nil
}
