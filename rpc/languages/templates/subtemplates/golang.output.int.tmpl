switch remixdbInternalPacketType {
case 0x0a:
    // Continue through.
case 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f:
    return int(remixdbInternalPacketType - 0x10), nil
case 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
    0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f:
    return -1 - int(remixdbInternalPacketType - 0x20), nil
default:
    return remixdbInternalError(remixdbInternalUnexpectedPacket("int", remixdbInternalPacketType))
}

if len(b) < 8 {
    return remixdbInternalError(ServerError{
        Code:    "malformed_packet",
        Message: "Packet too short to contain integer",
    })
}

remixdbInternalInt64 := func(u uint64) int64 {
    if u > math.MaxInt64 {
        return -int64(^u + 1)
    }
    return int64(u)
}
remixdbInternalValue := int(remixdbInternalInt64(binary.LittleEndian.Uint64(b[:8])))
b = b[8:]

return remixdbInternalValue, nil
